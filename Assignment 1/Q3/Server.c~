// Server side C/C++ program to demonstrate Socket programming 
#include <unistd.h> 
#include <stdio.h> 
#include <sys/socket.h> 
#include <stdlib.h> 
#include <netinet/in.h> 
#include <string.h> 
#include <pthread.h>
#include <dirent.h>
#define PORT 8190

struct dirent *de;
DIR *dr;

void func(int* new_socket)
{
	int valread;
	char buffer[1024] = {0};
	char chunk[1024] = {0};
	char *hello = "Hello from Server";
  	dr = opendir(".");
	while ((de = readdir(dr)) != NULL){
 		strcpy(buffer , de->d_name);
		send(*new_socket , buffer , strlen(buffer) , 0 );
            printf("%s\n", de->d_name); 
  	}
    closedir(dr);     
   // printf("Hello\n");
   // fflush(stdout);
	char filename[100];
	valread = read( *new_socket , buffer, 1024);
	strcpy(filename , buffer); 
	printf("%s\n",buffer );
	sleep(1); 
	send(*new_socket , hello , strlen(hello) , 0 ); 
	//fflush(stdout);
	printf("Hello message sent\n"); 

    FILE *fptr; 

	char c; 

	//printf("Enter the filename to open \n"); 
	//scanf("%s", filename); 

	// Open file 
	fptr = fopen(filename, "r"); 
	if (fptr == NULL) 
	{ 
		printf("Cannot open file \n"); 
		exit(0); 
	} 

	// Read contents from file
	int len,n,m; 
	 do{
	 	//chunk[len] = '\0';
	 	n = fread(chunk, 1, sizeof(chunk), fptr);
		chunk[n] = '\0';
	 	if(n){
	 	m =send(*new_socket , chunk, sizeof(chunk) , 0 );
	 	}
	 	else{
	 	m = 0;
	 	}
	 	printf("%s\n",chunk);
        	
        	//sleep(2);
	}while(n>0 && n==m);

	fclose(fptr); 

	return;

}

int main(int argc, char const *argv[]) 
{ 
		int server_fd, new_socket, valread; 
		struct sockaddr_in address; 
		int opt = 1; 
		int addrlen = sizeof(address); 
		char buffer[1024] = {0}; 
		char *hello = "Hello from server";
		// Creating socket file descriptor 
		if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) 
		{ 
			perror("socket failed"); 
			exit(EXIT_FAILURE); 
		} 
		
		// Forcefully attaching socket to the port 8080 
		if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,&opt, sizeof(opt))) 
		{ 
			perror("setsockopt"); 
			exit(EXIT_FAILURE); 
		} 
		address.sin_family = AF_INET; 
		address.sin_addr.s_addr = INADDR_ANY; 
		address.sin_port = htons( PORT ); 
		
		if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) 
		{ 
			perror("bind failed"); 
			exit(EXIT_FAILURE); 
		}

	while(1)
	{ 
		if (listen(server_fd, 3) < 0) 
		{ 
			perror("listen"); 
			exit(EXIT_FAILURE); 
		} 
		
		int test = (new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0;

		if (test) 
		{ 
			perror("accept"); 
			exit(EXIT_FAILURE); 
		} 

		else 
		{
			pthread_t thread_id;
			pthread_create(&thread_id, NULL, (void *)&func, (void *)&new_socket);
			//pthread_join(thread_id, NULL); 
		}
		
	}

	return 0; 
} 
